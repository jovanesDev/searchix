{"version":3,"sources":["componentes/Buscador.js","componentes/Imagen.js","componentes/Pagina.js","componentes/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","busquedaRef","React","createRef","obtenerDatos","e","preventDefault","termino","current","value","props","datosBusqueda","onSubmit","this","className","ref","type","placeholder","required","Component","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","style","minHeight","src","alt","maxHeight","objectFit","href","target","Pagina","onClick","paginaAtras","actualPage","paginaSiguiente","Resultado","mostrarResultado","imagenes","length","console","log","Fragment","map","key","id","App","state","pagina","setState","consultarApi","url","fetch","then","respuesta","json","resultado","hits","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.084707ac.chunk.js","sourcesContent":["import '../css/Buscador.css'\r\nimport '../css/App-query.css'\r\n\r\nimport React, { Component } from 'react'\r\n\r\nexport class Buscador extends Component {\r\n\r\n    busquedaRef = React.createRef();\r\n\r\n    obtenerDatos = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        // tomamos el valor del input\r\n        const termino = this.busquedaRef.current.value\r\n        \r\n        // enviamos al componente principal\r\n        this.props.datosBusqueda(termino)\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <form onSubmit={this.obtenerDatos}>\r\n                <div className=\"row mt-5 justify-content-center\">\r\n                    <div className=\"form-group col-6 col-sm-6 col-md-6 col-lg-6 col-xl-6\">\r\n                        <input ref={this.busquedaRef} className=\" search form-control form-control-lg \"  type=\"text\" placeholder= \" Ejemplo : Futbol \" required />\r\n                    </div>\r\n\r\n                    <div className=\"form-group col-4  col-sm-2 col-md-2 col-lg-2 col-xl-2\">\r\n                     <input type=\"submit\" className=\"btn btn-info\" value=\"Buscar\"/>\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Buscador\r\n","import React from 'react'\r\nimport '../css/App-query.css'\r\n\r\n\r\nconst Imagen = (props) => {\r\n\r\n    const { largeImageURL, likes, previewURL, tags, views } = props.imagen\r\n\r\n    return (\r\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-5\">\r\n\r\n            \r\n                <div className=\"card border-info\" style={{minHeight:'300px'}} >\r\n                    <div className=\"card-header\" >\r\n                        <img src={previewURL} alt={tags} className=\"card-img-top \" style={{maxHeight:'170px', objectFit:'contain'}}  />\r\n                    </div>\r\n                    <div className=\"card-body text-center\">\r\n                        <h4 className=\"card-title text-danger\">Likes : {likes}</h4>\r\n                        <p className=\"card-text  text-warning\"> Views : {views}</p>\r\n                    </div>\r\n                    <a type =\"button\" href={largeImageURL} target=\"_blank\" className=\"btn btn-info d-block mb-2\">Ver la imagen </a>\r\n                </div>\r\n\r\n            \r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Imagen;","import React from 'react'\r\n\r\n\r\nconst Pagina = props => {\r\n\r\n\r\n\r\n    return (\r\n\r\n     <div className =\" py-3 mb-5 row justify-content-center\">\r\n         <button onClick={props.paginaAtras} type=\"button\" className=\"btn btn-info \">Atras &larr;</button>\r\n        <div className=\" text-center mx-2 bg-dark\">\r\n            <p className=\"text-info p-2 m-0 text-lg\">Pagina : {props.actualPage} </p>\r\n            \r\n            </div>\r\n         <button onClick={props.paginaSiguiente} type=\"button\" className=\"btn btn-info\">Siguente &rarr;</button>\r\n     </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Pagina ;\r\n","import React, { Component } from 'react'\r\nimport Imagen from './Imagen'\r\nimport Pagina from './Pagina';\r\n\r\nclass Resultado extends Component {\r\n\r\n    mostrarResultado = () => {\r\n\r\n        const imagenes = this.props.imagenes\r\n\r\n\r\n        if (imagenes.length === 0 || !imagenes ) {\r\n\r\n            return null\r\n\r\n            \r\n        } else {\r\n\r\n            console.log(imagenes)\r\n            return (\r\n\r\n\r\n                <React.Fragment>\r\n\r\n                    <Pagina\r\n\r\n                        paginaSiguiente={this.props.paginaSiguiente}\r\n                        paginaAtras={this.props.paginaAtras}\r\n                        actualPage = {this.props.actualPage}\r\n\r\n                    />\r\n\r\n\r\n\r\n                    <div className=\"col-12 p-5 row\">\r\n\r\n                        {imagenes.map(imagen => (\r\n\r\n                            <Imagen\r\n\r\n                                key={imagen.id}\r\n                                imagen={imagen}\r\n                            />\r\n\r\n                        ))}\r\n                    </div>\r\n\r\n                    <Pagina\r\n\r\n                        paginaSiguiente={this.props.paginaSiguiente}\r\n                        paginaAtras={this.props.paginaAtras}\r\n                        actualPage = {this.props.actualPage}\r\n\r\n                    />\r\n\r\n\r\n                </React.Fragment>\r\n            )\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <React.Fragment>\r\n                    {this.mostrarResultado()}\r\n                </React.Fragment>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Resultado\r\n","\nimport Buscador from './componentes/Buscador'\nimport Resultado from './componentes/Resultado'\nimport '../src/css/App.css'\nimport '../src/css/App-query.css'\n\n\n\nimport React, { Component } from 'react'\n\nexport class App extends Component {\n\n\n\n  // Mis States\n  state = {\n\n    termino: '',\n    imagenes: [],\n    pagina: ''\n  }\n\n\n \n\n\n\n  paginaSiguiente = (e) => {\n\n    //leer el state actual \n\n    let pagina = this.state.pagina\n\n    // sumar uno a la pagina \n\n    pagina++\n\n    // cambiar el state \n\n    this.setState({\n\n      pagina: pagina\n\n\n    }, () => {\n\n      this.consultarApi()\n    })\n\n    //console.log(pagina)\n\n  }\n\n\n  paginaAtras = (e) => {\n\n\n\n    //leer el state actual \n\n    let pagina = this.state.pagina\n\n    // sumar uno a la pagina \n\n    pagina--\n\n    // detener la funcion si la pagina esta en 1\n\n    if (pagina === 0) return null\n\n    // cambiar el state \n\n    this.setState({\n\n      pagina: pagina\n\n    }, () => {\n      this.consultarApi()\n    })\n\n    //console.log(pagina)\n\n  }\n\n\n  // Consumo Api Rest del Pixabay \n\n  consultarApi = () => {\n\n    const pagina = this.state.pagina\n    const termino = this.state.termino;\n    const url = `https://pixabay.com/api/?key=17725131-3c30fc607589cd1e6f3c16acf&q=${termino}&per_page=30&page=${pagina}`;\n\n\n\n    fetch(url)\n      .then(respuesta => respuesta.json())\n      .then(resultado => this.setState({ imagenes: resultado.hits }))\n\n  }\n\n\n\n\n\n  //Recibo los datos del Input y Muestro\n\n  datosBusqueda = (termino) => {\n\n    this.setState({\n\n      termino: termino,\n      pagina: 1\n\n    }, () => {\n\n      this.consultarApi();\n    })\n\n  }\n\n\n  \n\n\n\n  render() {\n    return (\n      <div className=\" main container-fluid \">\n\n        <div className=\"buscador container-fluid\">\n\n          <div className=\"jumbotron \">\n\n            <div className=\" context container mt-4  w-100% \">\n\n              <h2 className=\"row-die\">Bienvenido a :<span className=\"audio-wide ml-2\">Searchix</span></h2>\n              <p className=\"row-die mt-4 \">Encuentra lo que buscas con un click</p>\n              <div className=\"line\"></div>\n\n            </div>\n\n            <Buscador\n              datosBusqueda={this.datosBusqueda}\n             \n\n\n            />\n\n\n          </div> {/*fin jumbroton*/}\n\n\n\n          <Resultado\n            imagenes={this.state.imagenes}\n            paginaSiguiente={this.paginaSiguiente}\n            paginaAtras={this.paginaAtras}\n            actualPage = {this.state.pagina}\n\n          />\n\n\n        </div>\n\n\n      </div>\n\n\n    )\n  }\n}\n\nexport default App\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}